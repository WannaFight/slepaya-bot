from math import ceil
from os import getenv
import random
from time import sleep

from apscheduler.schedulers.background import BackgroundScheduler
import boto3
from pylunar import MoonInfo
from markovify import NewlineText
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton


AWS_KEY_ID = getenv('AWS_KEY_ID', None)
AWS_SECRET = getenv('AWS_SECRET', None)
TOKEN = getenv('BOT_TOKEN', None)

MOSCOW_LOCATION = ((55, 45, 21), (-37, 37, 2))
MOON_PHASE_TEXT_EMOJI = {
    'NEW_MOON': ('–Ω–æ–≤–æ–ª—É–Ω–∏–µ', 'üåë'),
    'WAXING_CRESCENT': ('–º–æ–ª–æ–¥–∞—è –ª—É–Ω–∞', 'üåí'),
    'FIRST_QUARTER': ('–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', 'üåì'),
    'WAXING_GIBBOUS': ('–ø—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', 'üåî'),
    'FULL_MOON': ('–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ', 'üåï'),
    'WANING_GIBBOUS': ('—É–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', 'üåñ'),
    'LAST_QUARTER': ('–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å', 'üåó'),
    'WANING_CRESCENT': ('—Å—Ç–∞—Ä–∞—è –ª—É–Ω–∞', 'üåò')
}

slepaya = telebot.TeleBot(TOKEN)

markup = ReplyKeyboardMarkup(resize_keyboard=True)

markup.row(KeyboardButton('–í–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç'),
           KeyboardButton('–ß—É–¥–Ω–æ–π —Å–æ–≤–µ—Ç'),
           KeyboardButton('–ö–æ–º–∞–Ω–¥—ã'))
markup.row(KeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'),
           KeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'),
           KeyboardButton('–°–ø—Ä–∞–≤–∫–∞'))


quotes_markof = open('quotes.txt').read()
quotes = quotes_markof.splitlines()

scheduler = BackgroundScheduler()


@slepaya.message_handler(commands=['start'])
def send_welcome(message: telebot.types.Message):
    cid = message.chat.id
    print(f"LOGS: [START] {cid} - {message.from_user.username}")
    slepaya.send_message(cid, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}")
    sleep(0.5)
    slepaya.send_message(cid, "–ù–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏, –∑–Ω–∞—é")
    sleep(0.6)
    slepaya.send_message(cid, "–ó–∞ —Å–æ–≤–µ—Ç–æ–º —Ç–µ–±—è –∫–æ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏",
                         reply_markup=markup)


@slepaya.message_handler(commands=['sub'])
def subscribe(message: telebot.types.Message):
    cid = message.chat.id
    item = {'chat_id': str(cid)}

    dynamo_db = boto3.resource('dynamodb',
                           aws_access_key_id=AWS_KEY_ID,
                           aws_secret_access_key=AWS_SECRET,
                           region_name='eu-north-1')

    table = dynamo_db.Table('users')

    try:
        # User is subbed -> do nothing
        table.get_item(Key=item)['Item']
        slepaya.send_message(cid, "–ú–æ—è –≤–Ω—É—á–∫–∞ —Ç–µ–±—è —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∞",
                             reply_markup=markup)
    except KeyError:
        # User is not subbed -> add to dynamo db
        slepaya.send_message(cid, "–ß—Ç–æ-–∂, –ª–∞–¥–Ω–æ, –≤–Ω—É—á–∫–∞ –º–æ—è –∑–∞–ø–∏—à–µ—Ç —Ç–µ–±—è")
        sleep(0.4)
        slepaya.send_message(cid, "–†–∞–∑ –≤ 3 –¥–Ω—è –≤ 9:33 –ø–æ —á–∞—Å–∞–º –º–æ—Å–∫–æ–≤—Å–∫–∏–º " +
                                  "–±—É–¥—É —Å–æ–≤–µ—Ç–æ–º —Ç–µ–±—è –æ–¥–∞—Ä–∏–≤–∞—Ç—å")

        table.put_item(Item=item)
        print(f"LOGS: [SUB] {cid} - {message.from_user.username}")

        slepaya.send_message(cid, "–ù—É –≤—Å–µ, —Å—Ç—É–ø–∞–π —Å –º–∏—Ä–æ–º")
        slepaya.send_message(cid, "–°–æ–≤–µ—Ç–æ–º —Ç–µ–±—è –Ω–µ –æ–±–¥–µ–ª—é",
                             reply_markup=markup)


@slepaya.message_handler(regexp=r'–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
def subscribe_reg(message: telebot.types.Message):
    subscribe(message)


@slepaya.message_handler(commands=['unsub'])
def unsubscribe(message: telebot.types.Message):
    cid = message.chat.id
    name = message.from_user.first_name
    item = {'chat_id': str(cid)}

    dynamo_db = boto3.resource('dynamodb',
                               aws_access_key_id=AWS_KEY_ID,
                               aws_secret_access_key=AWS_SECRET,
                               region_name='eu-north-1')
    table = dynamo_db.Table('users')

    try:
        # User is subbed -> unsubscribe
        table.get_item(Key=item)['Item']

        slepaya.send_message(cid, f"–û—Ö, –æ—Ö, {name}, —á—Ç–æ-–∂ –¥–µ–ª–∞—Ç—å-—Ç–æ...")
        sleep(0.8)
        slepaya.send_message(cid, "–õ–∞–¥–Ω–æ, —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ—à—É –≤–Ω—É—á–∫—É " +
                             "—Ç–µ–±—è —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
        table.delete_item(Key=item)
        print(f"LOGS: [UNSUB] {cid} - {message.from_user.username}")
        sleep(0.9)
        slepaya.send_message(cid, "–í–Ω—É—á–∫–∞ –≤—ã–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è –∏–∑ —Ç–µ—Ç—Ä–∞–¥–∫–∏")
        slepaya.send_message(cid, "–ü–æ–º–Ω–∏ –æ–¥–Ω–æ - —Ç—ã –≤—Å–µ–≥–¥–∞ –∫–æ –º–Ω–µ " +
                             "–º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è", reply_markup=markup)
    except KeyError:
        # User is not subbed -> do nothing
        slepaya.send_message(cid, "–ê —Ç–µ–±—è –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏")
        slepaya.send_message(cid, "–ú–æ–≥—É –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–æ—é –≤–Ω—É—á–∫—É —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å")
        slepaya.send_message(cid, "/sub (–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è)", reply_markup=markup)


@slepaya.message_handler(regexp=r'–û—Ç–ø–∏—Å–∞—Ç—å—Å—è')
def unsubscribe_reg(message: telebot.types.Message):
    unsubscribe(message)


@slepaya.message_handler(commands=['advice'])
def send_random_quote(message: telebot.types.Message):
    quote = random.choice(quotes)
    cid = message.chat.id
    slepaya.send_message(cid, quote, reply_markup=markup)
    print(f"LOGS: [ADVICE] {cid} - {message.from_user.username}")


@slepaya.message_handler(regexp=r'–í–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç')
def send_random_quote_reg(message: telebot.types.Message):
    send_random_quote(message)


@slepaya.message_handler(commands=['badvice'])
def send_generated_quote(message: telebot.types.Message):
    cid = message.chat.id
    # text = generate_quote('quotes.txt')
    text = NewlineText(quotes_markof).make_sentence()
    if text:
        slepaya.send_message(cid, text)
        slepaya.send_message(cid, "–¢–∞–∫ —Å–∫–∞–∑–∞–ª –¥—É—Ö –¥—Ä–µ–≤–Ω–∏–π, " +
                             "–ø–æ—Å–µ—Ç–∏–≤—à–∏–π –º–µ–Ω—è —Ç–æ–ª—å–∫–æ —á—Ç–æ", reply_markup=markup)
    else:
        slepaya.send_message(cid, "–î—É—Ö –¥—Ä–µ–≤–Ω–∏–π –ø—Ä–æ–º–æ–ª—á–∞–ª", reply_markup=markup)
    print(f"LOGS: [BADVICE] {cid} - {message.from_user.username}")


@slepaya.message_handler(regexp=r'–ß—É–¥–Ω–æ–π —Å–æ–≤–µ—Ç')
def send_generated_quote_reg(message: telebot.types.Message):
    send_generated_quote(message)


@slepaya.message_handler(commands=['info'])
def send_info(message: telebot.types.Message):
    cid = message.chat.id
    slepaya.send_message(cid, "–°–∫–∞–∑–∞–≤—à–∏ –º–Ω–µ /badvice, " +
                         "–ø–æ–ª—É—á–∏—à—å –º—É–¥—Ä–æ—Å—Ç—å —á—É–¥–Ω—É—é")
    sleep(0.5)
    slepaya.send_message(cid, "–ò—Ö –º–Ω–µ –¥—É—Ö –¥—Ä–µ–≤–Ω–∏–π –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∞ —è —Ç–µ–±–µ –ø–∏—à—É")
    sleep(0.4)
    slepaya.send_message(cid, "–î—É—Ö –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–∏ –º—É–¥—Ä–æ—Å—Ç–∏ " +
                         "–∏–∑ –ú–∞—Ä–∫–æ–≤—Å–∫–æ–π —Ü–µ–ø–∏ –±–µ—Ä–µ—Ç")
    sleep(0.6)
    slepaya.send_message(cid, "–ê —á—Ç–æ —ç—Ç–æ –∑–∞ –∑–≤–µ—Ä—å —Ç–∞–∫–æ–π, –ú–∞—Ä–∫–æ–≤—Å–∫–∏–µ —Ü–µ–ø–∏, " +
                         "–º–æ–∂–Ω–æ –≤ –≤–∞—à–∏—Ö –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                         reply_markup=markup)


@slepaya.message_handler(regexp=r'–°–ø—Ä–∞–≤–∫–∞')
def send_info_reg(message: telebot.types.Message):
    send_info(message)


@slepaya.message_handler(commands=['help'])
def send_help(message: telebot.types.Message):
    cid = message.chat.id
    txt = """/advice (–í–µ—Ä–Ω—ã–π —Å–æ–≤–µ—Ç) - –ë–∞–±–∞ –ù–∏–Ω–∞ –æ–¥–∞—Ä–∏—Ç –í–∞—Å –º—É–¥—Ä–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–π
    /badvice (–ß—É–¥–Ω–æ–π —Å–æ–≤–µ—Ç) - –°–≤—è—Ç–æ–π –î—É—Ö –ø–æ—Å–µ—Ç–∏—Ç –±–∞–±—É –ù–∏–Ω—É
    /sub (–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è) - –ë–∞–±–∞ –ù–∏–Ω–∞ –±—É–¥–µ—Ç –æ–¥–∞—Ä–∏–≤–∞—Ç—å –í–∞—Å –º—É–¥—Ä–æ—Å—Ç—å—é –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å
    /unsub (–û—Ç–ø–∏—Å–∞—Ç—å—Å—è) - –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –º—É–¥—Ä–æ—Å—Ç–µ–π –±–∞–±—ã –ù–∏–Ω—ã –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è
    /info (–°–ø—Ä–∞–≤–∫–∞) - –û—Ç–∫—É–¥–∞ –º—É–¥—Ä–æ—Å—Ç–∏ /badvice –¥—É—Ö–∞ –¥—Ä–µ–≤–Ω–µ–≥–æ –±–µ—Ä—É—Ç—Å—è
    /help (–ö–æ–º–∞–Ω–¥—ã) - –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –º–æ–≥—É –æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ
    """
    slepaya.send_message(cid, "–í–æ—Ç —á—Ç–æ –∂–¥—É –æ—Ç —Ç–µ–±—è —É—Å–ª—ã—à–∞—Ç—å")
    sleep(0.6)
    slepaya.send_message(cid, txt)


@slepaya.message_handler(regexp=r'–ö–æ–º–∞–Ω–¥—ã')
def send_help_reg(message: telebot.types.Message):
    send_help(message)


@slepaya.message_handler(commands=['testnotif'])
def test_notification(message: telebot.types.Message):
    cid = message.chat.id

    if message.from_user.username == 'cognomen':
        # Forming lunar day message
        moon_info = MoonInfo(*MOSCOW_LOCATION)
        moon_age, moon_phase = ceil(moon_info.age()), moon_info.phase_name()
        lunar_msg = (f"{random.choice(['–ó–∞ –æ–∫–Ω–æ–º', '–ù–∞ –¥–≤–æ—Ä–µ', '–°–µ–≥–æ–¥–Ω—è', '–¢–µ–ø–µ—Ä–∏—á–∞', '–ù—ã–Ω–µ'])} "
                    f"{moon_age} {random.choice(['–ª—É–Ω–Ω—ã–µ —Å—É—Ç–∫–∏', '–ª—É–Ω–Ω—ã–π –¥–µ–Ω—å'])}, "
                    f"{' '.join(MOON_PHASE_TEXT_EMOJI.get(moon_phase, ['','']))}")

        # Forming 2nd message
        mes = ['–≤–æ—Ç —á—Ç–æ', '—Å–∫–∞–∂—É', '—Ç–µ–±–µ', '—Å–µ–≥–æ–¥–Ω—è']
        random.shuffle(mes)
        mes = ' '.join(mes).capitalize()

        quote = random.choice(quotes)

        final_msg = f"""{lunar_msg}\n\n{mes}\n\n{quote}"""
        slepaya.send_message(cid, final_msg)

    else:
        slepaya.send_message(cid, text="–ö—É–¥–∞ –ª–µ–∑–µ—à—å?? –¢—É–¥–∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è")


@slepaya.message_handler(func=lambda message: True)
def reply_to_others(message: telebot.types.Message):
    slepaya.reply_to(message, "–ò—à—å —Ç—ã - –∑–∞ —Å–ª–æ–≤–æ–º –≤ –∫–∞—Ä–º–∞–Ω –Ω–µ –ª–µ–∑–µ—à—å",
                     reply_markup=markup)


@scheduler.scheduled_job("interval", start_date='2021-2-16 06:33:00',
                         hours=72, id='notifications')
def send_notifications():
    dynamo_db = boto3.resource('dynamodb',
                               aws_access_key_id=AWS_KEY_ID,
                               aws_secret_access_key=AWS_SECRET,
                               region_name='eu-north-1')
    table = dynamo_db.Table('users')
    ids = (i['chat_id'] for i in table.scan()['Items'])
    
    # Forming lunar day message
    moon_info = MoonInfo(*MOSCOW_LOCATION)
    moon_age, moon_phase = ceil(moon_info.age()), moon_info.phase_name()
    lunar_msg = (f"{random.choice(['–ó–∞ –æ–∫–Ω–æ–º', '–ù–∞ –¥–≤–æ—Ä–µ', '–°–µ–≥–æ–¥–Ω—è', '–¢–µ–ø–µ—Ä–∏—á–∞', '–ù—ã–Ω–µ'])} "
                f"{moon_age} {random.choice(['–ª—É–Ω–Ω—ã–µ —Å—É—Ç–∫–∏', '–ª—É–Ω–Ω—ã–π –¥–µ–Ω—å'])}, "
                f"{' '.join(MOON_PHASE_TEXT_EMOJI.get(moon_phase, ['','']))}")

    # Forming 2nd message
    mes = ['–≤–æ—Ç —á—Ç–æ', '—Å–∫–∞–∂—É', '—Ç–µ–±–µ', '—Å–µ–≥–æ–¥–Ω—è']
    random.shuffle(mes)
    mes = ' '.join(mes).capitalize()

    send_counter, total_counter = 0, 0

    for c_id in ids:
        # Picking random quote for each user
        quote = random.choice(quotes)

        try:
            final_msg = f"""{lunar_msg}\n\n{mes}\n\n{quote}"""
            slepaya.send_message(c_id, final_msg)
            print(f"LOGS: [NOTIFICATIONS] send_notifications to {c_id}")
            send_counter += 1
            sleep(0.05)

        except telebot.apihelper.ApiTelegramException as e:
            err_desc = e.result_json['description']
            print(f"LOGS: [NOTIFICATIONS_EXCEPTION] {err_desc} {c_id}")

        finally:
            total_counter += 1

    print(f"LOGS: [NOTIFICATIONS_STAT] Send to {send_counter}/{total_counter}")


scheduler.start()
slepaya.polling(none_stop=True)
