from math import ceil
from os import getenv
import random
from time import sleep

from apscheduler.schedulers.background import BackgroundScheduler
import boto3
from botocore.exceptions import (
    ConnectTimeoutError, ConnectionClosedError, 
    ConnectionError, NoCredentialsError, NoCredentialsError)
from pylunar import MoonInfo
from markovify import NewlineText
from telebot import TeleBot, apihelper
from telebot.types import KeyboardButton, Message, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

from typing import List
from utils import searcher, ending_decider, QuotesModel


AWS_KEY_ID = getenv('AWS_KEY_ID', None)
AWS_SECRET = getenv('AWS_SECRET', None)
TOKEN = getenv('BOT_TOKEN', getenv('LAYER_BOT_TOKEN'))

MOSCOW_LOCATION = ((55, 45, 21), (-37, 37, 2))
MOON_PHASE_TEXT_EMOJI = {
    'NEW_MOON': ('–Ω–æ–≤–æ–ª—É–Ω–∏–µ', 'üåë'),
    'WAXING_CRESCENT': ('–º–æ–ª–æ–¥–∞—è –ª—É–Ω–∞', 'üåí'),
    'FIRST_QUARTER': ('–ø–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', 'üåì'),
    'WAXING_GIBBOUS': ('–ø—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', 'üåî'),
    'FULL_MOON': ('–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ', 'üåï'),
    'WANING_GIBBOUS': ('—É–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', 'üåñ'),
    'LAST_QUARTER': ('–ø–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å', 'üåó'),
    'WANING_CRESCENT': ('—Å—Ç–∞—Ä–∞—è –ª—É–Ω–∞', 'üåò')
}

COMMANDS_MESSAGE = ("/advice (–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏–º–µ—Ç–∞) - –ë–∞–±–∞ –ù–∏–Ω–∞ –æ–¥–∞—Ä–∏—Ç –í–∞—Å –º—É–¥—Ä–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω–æ–π\n"
                    "/badvice (–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ç—É) - –ë–∞–±–∞ –ù–∏–Ω–∞ –ø—Ä–∏–¥—É–º–∞–µ—Ç –ø—Ä–∏–º–µ—Ç—É\n"
                    "/sub (–ü–æ–¥–ø–∏—Å–∫–∞) - –ë–∞–±–∞ –ù–∏–Ω–∞ –±—É–¥–µ—Ç –æ–¥–∞—Ä–∏–≤–∞—Ç—å –í–∞—Å –º—É–¥—Ä–æ—Å—Ç—å—é –∫–∞–∂–¥—ã–π —Ç—Ä–µ—Ç–∏–π –¥–µ–Ω—å\n"
                    "/unsub (–û—Ç–ø–∏—Å–∫–∞) - –û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –º—É–¥—Ä–æ—Å—Ç–µ–π –±–∞–±—ã –ù–∏–Ω—ã –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è\n"
                    "/help (–ö–æ–º–∞–Ω–¥—ã) - –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –º–æ–≥—É –æ–∫–∞–∑–∞—Ç—å —Ç–µ–±–µ\n"
                    "/search (–ü–æ–∏—Å–∫) - –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–º–µ—Ç–∞–º")

INFO_MESSAGE = ('–°–∫–∞–∑–∞–≤—à–∏ –º–Ω–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ç—É" (/badvice), –ø–æ–ª—É—á–∏—à—å –º—É–¥—Ä–æ—Å—Ç—å —á—É–¥–Ω—É—é ‚òùÔ∏è\n\n'
                '–ò—Ö –º–Ω–µ –¥—É—Ö –¥—Ä–µ–≤–Ω–∏–π üëª –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –∞ —è —Ç–µ–±–µ –ø–∏—à—É.\n\n'
                '–î—É—Ö –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —ç—Ç–∏ –º—É–¥—Ä–æ—Å—Ç–∏ –∏–∑ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ üß† LSTM –±–µ—Ä–µ—Ç\n\n'
                '–ê —á—Ç–æ —ç—Ç–æ –∑–∞ –∑–≤–µ—Ä—å —Ç–∞–∫–æ–π, LSTM, –º–æ–∂–Ω–æ –≤ –≤–∞—à–∏—Ö –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞—Ö üåê –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ üëá')

MAIN_MARKUP = ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MARKUP.row(KeyboardButton('–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏–º–µ—Ç–∞ üîÄ'),
                KeyboardButton('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ç—ã üé≤'))
MAIN_MARKUP.row(KeyboardButton('–ö–æ–º–∞–Ω–¥—ã üìÑ'),
                KeyboardButton('–ü–æ–∏—Å–∫ üîç'))
MAIN_MARKUP.row(KeyboardButton('–ü–æ–¥–ø–∏—Å–∫–∞ üì•'),
                KeyboardButton('–û—Ç–ø–∏—Å–∫–∞ üì§'))

FOUND_QUOTES_MARKUP = ReplyKeyboardMarkup(resize_keyboard=True)
FOUND_QUOTES_MARKUP.row(KeyboardButton("–ï—â–µ –ø—Ä–∏–º–µ—Ç—É ‚è≠Ô∏è"),
                        KeyboardButton("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üõë"))

slepaya = TeleBot(TOKEN)

quotes_markof = open('quotes.txt').read()
quotes = quotes_markof.splitlines()

scheduler = BackgroundScheduler()

# Load model and generate one quote to warm it up
model = QuotesModel()
model.generate_next()
print('[LOGS] Ready!')

@slepaya.message_handler(commands=['start'])
def send_welcome(message: Message):
    cid = message.chat.id
    print(f"LOGS: [START] {cid}({message.from_user.username})")
    slepaya.send_message(cid, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}")
    sleep(0.5)
    slepaya.send_message(cid, "–ù–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏ ü§ê, –∑–Ω–∞—é...")
    sleep(0.6)
    slepaya.send_message(cid, "–ó–∞ —Å–æ–≤–µ—Ç–æ–º —Ç–µ–±—è –∫–æ –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ ‚òùÔ∏è",
                         reply_markup=MAIN_MARKUP)


@slepaya.message_handler(commands=['sub'])
def subscribe(message: Message):
    cid = message.chat.id
    item = {'chat_id': str(cid)}
    dynamo_db = boto3.resource('dynamodb', aws_access_key_id=AWS_KEY_ID,
                               aws_secret_access_key=AWS_SECRET, region_name='eu-north-1')

    table = dynamo_db.Table('users')

    try:
        # User is subbed -> do nothing
        table.get_item(Key=item)['Item']
        slepaya.send_message(cid, "–ú–æ—è –≤–Ω—É—á–∫–∞ —Ç–µ–±—è —É–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∞",
                             reply_markup=MAIN_MARKUP)
    except KeyError:
        # User is not subbed -> add to dynamo db
        slepaya.send_message(cid, "–ß—Ç–æ-–∂, –ª–∞–¥–Ω–æ, –≤–Ω—É—á–∫–∞ –º–æ—è –∑–∞–ø–∏—à–µ—Ç —Ç–µ–±—è")
        sleep(0.4)
        slepaya.send_message(cid, "–†–∞–∑ –≤ 3 –¥–Ω—è –≤ 9:33 –ø–æ —á–∞—Å–∞–º –º–æ—Å–∫–æ–≤—Å–∫–∏–º " +
                                  "–±—É–¥—É —Å–æ–≤–µ—Ç–æ–º —Ç–µ–±—è –æ–¥–∞—Ä–∏–≤–∞—Ç—å")

        table.put_item(Item=item)
        print(f"LOGS: [SUB] {cid}({message.from_user.username})")

        slepaya.send_message(cid, "–ù—É –≤—Å–µ, —Å—Ç—É–ø–∞–π —Å –º–∏—Ä–æ–º")
        slepaya.send_message(cid, "–°–æ–≤–µ—Ç–æ–º —Ç–µ–±—è –Ω–µ –æ–±–¥–µ–ª—é",
                             reply_markup=MAIN_MARKUP)
    except (ConnectTimeoutError, ConnectionClosedError, ConnectionError, NoCredentialsError, NoCredentialsError):
        slepaya.send_message(cid, "–û–π-–æ–π-–æ–π, —á—Ç–æ-—Ç–æ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ—Ç—Ä–∞–¥–∫—É —Å–æ —Å–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏")


@slepaya.message_handler(regexp=r'–ü–æ–¥–ø–∏—Å–∫–∞')
def subscribe_reg(message: Message):
    subscribe(message)


@slepaya.message_handler(commands=['unsub'])
def unsubscribe(message: Message):
    cid = message.chat.id
    name = message.from_user.first_name
    item = {'chat_id': str(cid)}
    
    dynamo_db = boto3.resource('dynamodb', aws_access_key_id=AWS_KEY_ID,
                               aws_secret_access_key=AWS_SECRET, region_name='eu-north-1')
    
    table = dynamo_db.Table('users')

    try:
        # User is subbed -> unsubscribe
        table.get_item(Key=item)['Item']

        slepaya.send_message(cid, f"–û—Ö, –æ—Ö, {name}, —á—Ç–æ-–∂ –¥–µ–ª–∞—Ç—å-—Ç–æ...")
        sleep(0.8)
        slepaya.send_message(cid, "–õ–∞–¥–Ω–æ, —Å–µ–π—á–∞—Å –ø–æ–ø—Ä–æ—à—É –≤–Ω—É—á–∫—É " +
                             "—Ç–µ–±—è —É–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
        table.delete_item(Key=item)
        print(f"LOGS: [UNSUB] {cid}({message.from_user.username})")
        sleep(0.9)
        slepaya.send_message(cid, "–í–Ω—É—á–∫–∞ –≤—ã–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è –∏–∑ —Ç–µ—Ç—Ä–∞–¥–∫–∏")
        slepaya.send_message(cid, "–ü–æ–º–Ω–∏ –æ–¥–Ω–æ - —Ç—ã –≤—Å–µ–≥–¥–∞ –∫–æ –º–Ω–µ " +
                             "–º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è", reply_markup=MAIN_MARKUP)
    except KeyError:
        # User is not subbed -> do nothing
        slepaya.send_message(cid, "–ê —Ç–µ–±—è –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏")
        slepaya.send_message(cid, "–ú–æ–≥—É –ø–æ–ø—Ä–æ—Å–∏—Ç—å –º–æ—é –≤–Ω—É—á–∫—É —Ç–µ–±—è –∑–∞–ø–∏—Å–∞—Ç—å")
        slepaya.send_message(cid, "/sub (–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è)", reply_markup=MAIN_MARKUP)
    except (ConnectTimeoutError, ConnectionClosedError, ConnectionError, NoCredentialsError, NoCredentialsError):
        slepaya.send_message(cid, "–û–π-–æ–π-–æ–π, —á—Ç–æ-—Ç–æ –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ—Ç—Ä–∞–¥–∫—É —Å–æ —Å–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏",
                             reply_markup=MAIN_MARKUP)



@slepaya.message_handler(regexp=r'–û—Ç–ø–∏—Å–∫–∞')
def unsubscribe_reg(message: Message):
    unsubscribe(message)


@slepaya.message_handler(commands=['advice'])
def send_random_quote(message: Message):
    quote = random.choice(quotes)
    cid = message.chat.id
    slepaya.send_message(cid, quote, reply_markup=MAIN_MARKUP)
    print(f"LOGS: [ADVICE] {cid}({message.from_user.username})")


@slepaya.message_handler(regexp=r'–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–∏–º–µ—Ç–∞')
def send_random_quote_reg(message: Message):
    send_random_quote(message)


@slepaya.message_handler(commands=['badvice'])
def send_generated_quote(message: Message):
    cid = message.chat.id
    # text = generate_quote('quotes.txt')
    # text = NewlineText(quotes_markof).make_sentence()
    code, text = model.translate_generated(t=random.randint(22, 40), words=random.randint(8, 9))
    if code == 200:
        slepaya.send_message(cid, text.capitalize()+'...', reply_markup=MAIN_MARKUP)
        print(f"LOGS: [BADVICE] {cid}({message.from_user.username})")
    else:
        print(f"LOGS [BADVICE_EXCEPTION]: {code}: {text}")
        slepaya.send_message(cid, "–ß—Ç–æ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–∞ —è —Å–≤—è–∑—å —Å –¥—É—Ö–æ–º. –ú–æ–∂–µ—Ç @cognomen –ø–æ–º–æ–∂–µ—Ç", reply_markup=MAIN_MARKUP)


@slepaya.message_handler(regexp=r'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ç—ã')
def send_generated_quote_reg(message: Message):
    send_generated_quote(message)


@slepaya.message_handler(commands=['help'])
def send_help(message: Message):
    cid = message.chat.id
    lstm_button = InlineKeyboardMarkup()
    lstm_button.add(InlineKeyboardButton(text="LSTM Wiki",
                                         url="https://ru.wikipedia.org/wiki/–î–æ–ª–≥–∞—è_–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è_–ø–∞–º—è—Ç—å"))
    slepaya.send_message(cid, "–í–æ—Ç —á—Ç–æ –∂–¥—É –æ—Ç —Ç–µ–±—è —É—Å–ª—ã—à–∞—Ç—å")
    sleep(0.6)
    slepaya.send_message(cid, text=COMMANDS_MESSAGE, reply_markup=MAIN_MARKUP)
    sleep(0.5)
    slepaya.send_message(cid, text=INFO_MESSAGE, reply_markup=lstm_button)


@slepaya.message_handler(regexp=r'–ö–æ–º–∞–Ω–¥—ã')
def send_help_reg(message: Message):
    send_help(message)


@slepaya.message_handler(commands=['testnotif'])
def test_notification(message: Message):
    cid = message.chat.id

    if message.from_user.username == 'cognomen':
        # Forming lunar day message
        moon_info = MoonInfo(*MOSCOW_LOCATION)
        moon_age, moon_phase = ceil(moon_info.age()), moon_info.phase_name()
        lunar_msg = (f"{random.choice(['–ó–∞ –æ–∫–Ω–æ–º', '–ù–∞ –¥–≤–æ—Ä–µ', '–°–µ–≥–æ–¥–Ω—è', '–¢–µ–ø–µ—Ä–∏—á–∞', '–ù—ã–Ω–µ'])} "
                    f"{moon_age} {random.choice(['–ª—É–Ω–Ω—ã–µ —Å—É—Ç–∫–∏', '–ª—É–Ω–Ω—ã–π –¥–µ–Ω—å'])}, "
                    f"{' '.join(MOON_PHASE_TEXT_EMOJI.get(moon_phase, ['','']))}")

        # Forming 2nd message
        mes = ['–≤–æ—Ç —á—Ç–æ', '—Å–∫–∞–∂—É', '—Ç–µ–±–µ', '—Å–µ–≥–æ–¥–Ω—è']
        random.shuffle(mes)
        mes = ' '.join(mes).capitalize()

        quote = random.choice(quotes)

        final_msg = f"""{lunar_msg}\n\n{mes}\n\n{quote}"""
        slepaya.send_message(cid, final_msg)

    else:
        slepaya.send_message(cid, text="–ö—É–¥–∞ –ª–µ–∑–µ—à—å?? –¢—É–¥–∞ —Ç–µ–±–µ –Ω–µ–ª—å–∑—è")


@slepaya.message_handler(commands=['search'])
def start_search(message: Message):
    serch_markup = ReplyKeyboardMarkup(resize_keyboard=True,
                                       one_time_keyboard=True)
    serch_markup.add('–û—Ç–º–µ–Ω–∞')
    msg = slepaya.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –º–Ω–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...",
                               reply_markup=serch_markup)
    slepaya.register_next_step_handler(msg, search_procedure)


@slepaya.message_handler(regexp=r'–ü–æ–∏—Å–∫')
def start_search_reg(message: Message):
    start_search(message)


def search_procedure(message: Message):
    cid = message.chat.id
    
    if message.text == '–û—Ç–º–µ–Ω–∞':
        slepaya.send_message(cid, '–ù—É –Ω–∞ –Ω–µ—Ç –∏ —Å—É–¥–∞ –Ω–µ—Ç', reply_markup=MAIN_MARKUP)
        return
    
    slepaya.reply_to(message, "–ò—â—É –≤ –ø–∏—Å—å–º–µ–Ω–∞—Ö –º–æ–∏—Ö –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É, –ø–æ–¥–æ–∂–¥–∏")
    print(f"LOGS: [SEARCH] {cid}({message.from_user.username}): {message.text}")
    indices = searcher(message.text, quotes, cutoff=90)

    if indices:
        l = len(indices)
        if l == 1:
            slepaya.send_message(cid, "–ù–∞—à–ª–∞—Å—å –≤—Å–µ–≥–æ 1 –ø—Ä–∏–º–µ—Ç–∞")
            sleep(0.5)
            slepaya.send_message(cid, quotes[indices[0]],
                                 reply_markup=MAIN_MARKUP)
            return
        else:
            random.shuffle(indices)
            last_index = indices.pop()
            slepaya.send_message(cid, quotes[last_index])
            sleep(0.5)
            msg = slepaya.send_message(cid, f"–ù–∞—à–ª–∞ –µ—â–µ {l-1} {ending_decider(l, '–ø—Ä–∏–º–µ—Ç')}",
                                       reply_markup=FOUND_QUOTES_MARKUP)
            slepaya.register_next_step_handler(msg, send_other_found_quotes, indices)
            return
    else:
        slepaya.send_message(cid, "–¢–∞–∫–æ–≥–æ –º—É–¥—Ä–µ–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –º–æ–∏—Ö –º—É–¥—Ä–æ—Å—Ç—è—Ö",
                             reply_markup=MAIN_MARKUP)
        return


def send_other_found_quotes(message: Message, indices: List[int]):
    cid = message.chat.id
    
    if not indices:
        slepaya.send_message(cid, "–ê –ø—Ä–∏–º–µ—Ç –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å",
                             reply_markup=MAIN_MARKUP)
        return
    if message.text.startswith("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"):
        slepaya.send_message(cid, "–•–æ—Ä–æ—à–æ", reply_markup=MAIN_MARKUP)
        return
    elif message.text.startswith('–ï—â–µ –ø—Ä–∏–º–µ—Ç—É'):
        msg = slepaya.send_message(cid, quotes[indices[0]],
                                   reply_markup=FOUND_QUOTES_MARKUP)
        slepaya.register_next_step_handler(msg, send_other_found_quotes, indices[1:])
        return


@slepaya.message_handler(func=lambda message: True)
def reply_to_others(message: Message):
    slepaya.reply_to(message, "–ò—à—å —Ç—ã - –∑–∞ —Å–ª–æ–≤–æ–º –≤ –∫–∞—Ä–º–∞–Ω –Ω–µ –ª–µ–∑–µ—à—å",
                     reply_markup=MAIN_MARKUP)


@scheduler.scheduled_job("interval", start_date='2021-2-16 06:33:00',
                         hours=72, id='notifications')
def send_notifications():
    dynamo_db = boto3.resource('dynamodb',
                               aws_access_key_id=AWS_KEY_ID,
                               aws_secret_access_key=AWS_SECRET,
                               region_name='eu-north-1')
    table = dynamo_db.Table('users')
    ids = (i['chat_id'] for i in table.scan()['Items'])
    
    # Forming lunar day message
    moon_info = MoonInfo(*MOSCOW_LOCATION)
    moon_age, moon_phase = ceil(moon_info.age()), moon_info.phase_name()
    lunar_msg = (f"{random.choice(['–ó–∞ –æ–∫–Ω–æ–º', '–ù–∞ –¥–≤–æ—Ä–µ', '–°–µ–≥–æ–¥–Ω—è', '–¢–µ–ø–µ—Ä–∏—á–∞', '–ù—ã–Ω–µ'])} "
                f"{moon_age} {random.choice(['–ª—É–Ω–Ω—ã–µ —Å—É—Ç–∫–∏', '–ª—É–Ω–Ω—ã–π –¥–µ–Ω—å'])}, "
                f"{' '.join(MOON_PHASE_TEXT_EMOJI.get(moon_phase, ['','']))}")

    # Forming 2nd message
    mes = ['–≤–æ—Ç —á—Ç–æ', '—Å–∫–∞–∂—É', '—Ç–µ–±–µ', '—Å–µ–≥–æ–¥–Ω—è']
    random.shuffle(mes)
    mes = ' '.join(mes).capitalize()

    send_counter, total_counter = 0, 0

    for c_id in ids:
        # Picking random quote for each user
        quote = random.choice(quotes)

        try:
            final_msg = f"""{lunar_msg}\n\n{mes}\n\n{quote}"""
            slepaya.send_message(c_id, final_msg)
            print(f"LOGS: [NOTIFICATIONS] send_notifications to {c_id}")
            send_counter += 1
            sleep(0.05)

        except apihelper.ApiTelegramException as e:
            err_desc = e.result_json['description']
            print(f"LOGS: [NOTIFICATIONS_EXCEPTION] {err_desc} {c_id}")

        finally:
            total_counter += 1

    print(f"LOGS: [NOTIFICATIONS_STAT] Send to {send_counter}/{total_counter}")


scheduler.start()

slepaya.enable_save_next_step_handlers(delay=2)
slepaya.load_next_step_handlers
slepaya.polling(none_stop=True)
